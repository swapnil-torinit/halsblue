<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Album extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Album_model');
    } 

    /*
     * Listing of album
     */
    function index($status='all')
    {
        $this->Common_model->checklogin();
        $data['album'] = $this->Album_model->get_all_album($status);
        
        $data['_view'] = 'album/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new album
     */
    function add()
    {   
        $this->Common_model->checklogin();
        $this->load->library('form_validation');

		$this->form_validation->set_rules('party_name','Party Name','required');
        $this->form_validation->set_rules('amount', 'Amount ', 'required|regex_match[/^[0-9]+$/]'); //{10} for 10 digits number
		
		if($this->form_validation->run())     
        {   
            $params = array(
                'party_name' => $this->input->post('party_name'),
                'amount' => $this->input->post('amount'),
                'bilty_number' => $this->input->post('bilty_number'),
				'comment' => $this->input->post('comment'),
                "reminder_date" => date('Y-m-d',strtotime($this->input->post("reminder_date"))),
                'status' => $this->input->post('status'),
                'created' => date('Y-m-d'),
            );
            
            $album_id = $this->Album_model->add_album($params);
            redirect('album/index');
        }
        else
        {            
            $data['_view'] = 'album/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    function updatestatus()
    {
        $id = $_GET['id'];
        $status = $_GET['status'];
        $params = array(
                    'status' => $status,
                );
        $this->Album_model->update_album($id,$params);  
        $this->session->set_flashdata('message', '<div class="alert alert-success">Note Status Updated</div>');          
        redirect('album/index/open');

    }

    /*
     * Editing a album
     */
    function edit($id)
    {   
        $this->Common_model->checklogin();
        // check if the album exists before trying to edit it
        $data['album'] = $this->Album_model->get_album($id);
        
        if(isset($data['album']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('party_name','Party Name','required');
            $this->form_validation->set_rules('amount', 'Amount ', 'required|regex_match[/^[0-9]+$/]'); //{10} for 10 digits number
		
			if($this->form_validation->run())     
            {   
                $params = array(
                    'party_name' => $this->input->post('party_name'),
                    'amount' => $this->input->post('amount'),
                    'bilty_number' => $this->input->post('bilty_number'),
                    'comment' => $this->input->post('comment'),
                    "reminder_date" => date('Y-m-d',strtotime($this->input->post("reminder_date"))),
                    'status' => $this->input->post('status'),
                );

                $this->Album_model->update_album($id,$params);            
                redirect('album/index');
            }
            else
            {
                $data['_view'] = 'album/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The album you are trying to edit does not exist.');
    } 

    /*
     * Deleting album
     */
    function remove($id)
    {
        $this->Common_model->checklogin();
        $album = $this->Album_model->get_album($id);

        // check if the album exists before trying to delete it
        if(isset($album['id']))
        {
            $this->Album_model->delete_album($id);
            redirect('album/index');
        }
        else
            show_error('The album you are trying to delete does not exist.');
    }
    function hurry()
    {
        $path =  $this->config->item('basepath');
        $this->load->dbutil();
        $prefs = array(
        'tables'        => array('album', 'notes'),   // Array of tables to backup.
        'ignore'        => array(),                     // List of tables to omit from the backup
        'format'        => 'txt',                       // gzip, zip, txt
        'filename'      => 'mybackup.sql',              // File name - NEEDED ONLY WITH ZIP FILES
        'add_drop'      => TRUE,                        // Whether to add DROP TABLE statements to backup file
        'add_insert'    => TRUE,                        // Whether to add INSERT data to backup file
        'newline'       => "\n"                         // Newline character used in backup file
);

    $this->dbutil->backup($prefs);

    $backup = $this->dbutil->backup($prefs);

    // Load the file helper and write the file to your server
    $this->load->helper('file');
    write_file($path.'upload/mybackup.sql', $backup);

    // Load the download helper and send the file to your desktop
    $this->load->helper('download');
    //force_download('mybackup.sql', $backup);
     $this->Common_model->checklogin();
    $this->db->query('truncate  album');
    $this->db->query('truncate  notes');
  //  echo $this->db->last_query();
    }
    
}
