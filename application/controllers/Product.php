<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Product extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        $this->load->model('Product_model');
        $this->load->model('Tax_clas_model');
        $this->load->model('Category_model');
        $this->load->model('Brand_model');
        $this->load->model('Variations_model');
        $this->load->model('Car_make_model');
        $this->load->model('Carmodel_model');
    }

    /*
     * Listing of products
     */
    public function index()
    {
        $this->Common_model->checklogin();
        $config['total_rows'] = $this->Product_model->get_all_products_count();
        $this->pagination->initialize($config);

        $data['products'] = $this->Product_model->get_all_products();

        $data['_view'] = 'product/index';
        $this->load->view('layouts/main', $data);
    }

    /*
     * Adding a new product
     */
    /**
     * @return null
     */
    public function add()
    {
        $this->Common_model->checklogin();
        $this->load->library('form_validation');

        $this->form_validation->set_rules('name', 'Name', 'required');
        $this->form_validation->set_rules('tax_class', 'Tax Class', 'required');
        $this->form_validation->set_rules('hsncode', 'HSN Code', 'required');

        /*$this->form_validation->set_rules('sku','Sku','required');
        $this->form_validation->set_rules('consumer_price','Consumer Price','required');
        $this->form_validation->set_rules('consumer_price', 'Consumer Price ', 'required|regex_match[/^[0-9]+$/]'); //{10} for 10 digits number

        $this->form_validation->set_rules('wholesaler_price','Wholesale Price','required');
        $this->form_validation->set_rules('wholesaler_price','Wholesale Price', 'required|regex_match[/^[0-9]+$/]'); //{10} for 10 digits number

        $this->form_validation->set_rules('retailer_price','Retailer Price','required');
        $this->form_validation->set_rules('retailer_price','Retailer Price', 'required|regex_match[/^[0-9]+$/]'); //{10} for 10 digits number

        $this->form_validation->set_rules('quantity','Quantity','required');
        $this->form_validation->set_rules('quantity','Quantity', 'required|regex_match[/^[0-9]+$/]'); //{10} for 10 digits number

        $this->form_validation->set_rules('category_id','Category','required');
        $this->form_validation->set_rules('brand_id','Brand','required');
        $this->form_validation->set_rules('car_make_id','Car make','required');
        $this->form_validation->set_rules('car_model_id','Car model','required');*/

        if ($this->input->post('product_type') == 2) {
            $this->form_validation->set_rules('variations_id', 'Variation', 'required');
        }

        if ($this->form_validation->run()) {
            $sku = $this->input->post('sku');
            if (!empty($sku)) {
                $pr = $this->db->get_where('products', array('sku' => $sku))->row_array();
                if (!empty($pr)) {
                    $this->session->set_flashdata('message', '<div class="alert alert-danger">Duplicate entry ' . $sku . ' for key sku!!!</div>');
                    redirect('product/add');
                }
            }

            $arr_name_value = "";
            $variationsc    = array();
            if ($this->input->post('variations_id') != "") {
                $this->load->model('Variations_model');
                $variations = $this->Variations_model->get_variations($this->input->post('variations_id'));
                $name_value = json_decode($variations["name_value"]);
                foreach ($name_value as $key => $val) {
                    if ($this->input->post("name_value_" . $key) == "on") {
                        if ($arr_name_value == "") {
                            $arr_name_value = $key;
                        } else {
                            $arr_name_value = $arr_name_value . "," . $key;
                        }
                    }
                }
                $variationsc[$this->input->post('variations_id')] = $arr_name_value;
            }

            $car_model_id = ($this->input->post('car_model_id') != '') ? $this->input->post('car_model_id') : '';

            $params = array(
                'product_type'     => $this->input->post('product_type'),
                'sku'              => $this->input->post('sku'),
                'name'             => $this->input->post('name'),
                'hsncode'          => $this->input->post('hsncode'),
                'consumer_price'   => $this->input->post('consumer_price'),
                'retailer_price'   => $this->input->post('retailer_price'),
                'wholesaler_price' => $this->input->post('wholesaler_price'),
                'tax_class'        => $this->input->post('tax_class'),
                'category_id'      => $this->input->post('category_id'),
                'brand_id'         => $this->input->post('brand_id'),
                'unit'             => $this->input->post('unit'),
                'car_make_id'      => $this->input->post('car_make_id'),
                'car_model_id'     => $car_model_id,
                'description'      => $this->input->post('description'),
                'variations'       => json_encode($variationsc),
                'remark'           => $this->input->post('remark'),
                'quantity'         => $this->input->post('quantity'),
                'status'           => 1,
            );
            $msg = $this->Product_model->add_product($params);

            $this->load->library('upload');
            $path = $this->config->item('basepath');
            if (!empty($_FILES["image"]["name"])) {
                $config['upload_path']   = $path . 'upload/product';
                $config['file_name']     = $msg . '_' . $_FILES["image"]["name"];
                $config['overwrite']     = true;
                $config['allowed_types'] = 'gif|jpg|png|jpeg';
                $config['max_size']      = '5000';
                $this->upload->initialize($config);
                if (!$this->upload->do_upload("image")) {
                    $data['error'] = $this->upload->display_errors();
                } else {
                    $data      = array('upload_data' => $this->upload->data());
                    $imagename = $data['upload_data']['file_name'];
                }
            } else {
                $imagename = '';
            }

            $datainfo = array(
                'thumbnail' => $imagename,
            );
            $this->Product_model->update_product($msg, $datainfo);

            //Update Stock Log
            $stocklog = array('product_id' => $msg, 'qty' => $this->input->post('quantity'), 'new_qty' => $this->input->post('quantity'), 'remarks' => 'Product Added');
            $this->Common_model->insert_table_data($stocklog, 'stock_log');

            redirect('product/index');
        } else {
            $this->load->model('Tax_clas_model');
            $data['all_tax_class'] = $this->Tax_clas_model->get_all_tax_class();

            $this->load->model('Category_model');
            $data['all_category'] = $this->Category_model->get_all_categories();

            $this->load->model('Brand_model');
            $data['all_brand'] = $this->Brand_model->get_all_brands();

            $this->load->model('Car_make_model');
            $data['all_car_make'] = $this->Car_make_model->get_all_car_make();

            $this->load->model('Carmodel_model');
            $data['all_car_model'] = $this->Carmodel_model->get_all_carmodel();

            $this->load->model('Variations_model');
            $data['all_variations'] = $this->Variations_model->get_all_variations();

            $data['_view'] = 'product/add';
            $this->load->view('layouts/main', $data);
        }
    }

    /*
     * Editing a product
     */
    /**
     * @param $id
     */
    public function edit($id)
    {
        $this->Common_model->checklogin();
        // check if the product exists before trying to edit it
        $data['product'] = $this->Product_model->get_product($id);

        if (isset($data['product']['id'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('name', 'Name', 'required');
            $this->form_validation->set_rules('tax_class', 'Tax Class', 'required');
            $this->form_validation->set_rules('hsncode', 'HSN Code', 'required');

            /*$this->form_validation->set_rules('sku','Sku','required');
            $this->form_validation->set_rules('consumer_price','Consumer Price','required');
            $this->form_validation->set_rules('consumer_price', 'Consumer Price ', 'required|regex_match[/^[0-9]+$/]'); //{10} for 10 digits number

            $this->form_validation->set_rules('wholesaler_price','Wholesale Price','required');
            $this->form_validation->set_rules('wholesaler_price','Wholesale Price', 'required|regex_match[/^[0-9]+$/]'); //{10} for 10 digits number

            $this->form_validation->set_rules('retailer_price','Retailer Price','required');
            $this->form_validation->set_rules('retailer_price','Retailer Price', 'required|regex_match[/^[0-9]+$/]'); //{10} for 10 digits number

            $this->form_validation->set_rules('quantity','Quantity','required');
            $this->form_validation->set_rules('quantity','Quantity', 'required|regex_match[/^[0-9]+$/]'); //{10} for 10 digits number

            $this->form_validation->set_rules('category_id','Category','required');
            $this->form_validation->set_rules('brand_id','Brand','required');
            $this->form_validation->set_rules('car_make_id','Car make','required');
            $this->form_validation->set_rules('car_model_id','Car model','required');*/

            if ($this->input->post('product_type') == 2) {
                $this->form_validation->set_rules('variations_id', 'Variation', 'required');
            }

            if ($this->form_validation->run()) {
                $sku = $this->input->post('sku');
                if (!empty($sku)) {
                    $this->db->where('sku', $sku);
                    $this->db->where_not_in('id', $data['product']['id']);
                    $pr = $this->db->get('products')->result_array();

                    if (!empty($pr)) {
                        $this->session->set_flashdata('message', '<div class="alert alert-danger">Duplicate entry ' . $sku . ' for key sku!!!</div>');
                        redirect('product/edit/' . $data['product']['id']);
                    }
                }

                $this->load->library('upload');
                $this->load->library('image_lib');
                $path = $this->config->item('basepath');
                if (!empty($_FILES["image"]["name"])) {
                    $config['upload_path']   = $path . 'upload/product';
                    $config['file_name']     = $data['product']['id'] . '_' . $_FILES["image"]["name"];
                    $config['overwrite']     = true;
                    $config['allowed_types'] = 'gif|jpg|png|jpeg';
                    $config['max_size']      = '5000';
                    $this->upload->initialize($config);
                    if (!$this->upload->do_upload("image")) {
                        $data['error'] = $this->upload->display_errors();
                    } else {
                        $filepath = $path . 'upload/product/' . $_REQUEST['image_copy'];
                        if (file_exists($filepath)) {
                            unlink($filepath);
                        }
                        $data      = array('upload_data' => $this->upload->data());
                        $imagename = $data['upload_data']['file_name'];
                    }
                } else {
                    $imagename = $_REQUEST['image_copy'];
                }

                $arr_name_value = "";
                $variationsc    = array();
                if ($this->input->post('variations_id') != "") {
                    $this->load->model('Variations_model');
                    $variations = $this->Variations_model->get_variations($this->input->post('variations_id'));
                    $name_value = json_decode($variations["name_value"]);
                    foreach ($name_value as $key => $val) {
                        if ($this->input->post("name_value_" . $key) == "on") {
                            if ($arr_name_value == "") {
                                $arr_name_value = $key;
                            } else {
                                $arr_name_value = $arr_name_value . "," . $key;
                            }
                        }
                    }
                    $variationsc[$this->input->post('variations_id')] = $arr_name_value;
                }

                $params = array(
                    'product_type'     => $this->input->post('product_type'),
                    'sku'              => $this->input->post('sku'),
                    'name'             => $this->input->post('name'),
                    'hsncode'          => $this->input->post('hsncode'),
                    'consumer_price'   => $this->input->post('consumer_price'),
                    'retailer_price'   => $this->input->post('retailer_price'),
                    'wholesaler_price' => $this->input->post('wholesaler_price'),
                    'tax_class'        => $this->input->post('tax_class'),
                    'category_id'      => $this->input->post('category_id'),
                    'brand_id'         => $this->input->post('brand_id'),
                    'unit'             => $this->input->post('unit'),
                    'car_make_id'      => $this->input->post('car_make_id'),
                    'car_model_id'     => $this->input->post('car_model_id'),
                    'description'      => $this->input->post('description'),
                    'variations'       => json_encode($variationsc),
                    'remark'           => $this->input->post('remark'),
                    'thumbnail'        => $imagename,
                    'status'           => true,
                );

                $this->Product_model->update_product($id, $params);
                redirect('product/index');
            } else {
                $this->load->model('Tax_clas_model');
                $data['all_tax_class'] = $this->Tax_clas_model->get_all_tax_class();

                $this->load->model('Category_model');
                $data['all_category'] = $this->Category_model->get_all_categories();

                $this->load->model('Brand_model');
                $data['all_brand'] = $this->Brand_model->get_all_brands();

                $this->load->model('Car_make_model');
                $data['all_car_make'] = $this->Car_make_model->get_all_car_make();

                $this->load->model('Carmodel_model');
                $data['all_car_model'] = $this->Carmodel_model->get_all_carmodel();

                $this->load->model('Variations_model');
                $data['all_variations'] = $this->Variations_model->get_all_variations();

                $data['_view'] = 'product/edit';
                $this->load->view('layouts/main', $data);
            }
        } else {
            show_error('The product you are trying to edit does not exist.');
        }

    }

    /*
     * Deleting product
     */
    /**
     * @param $id
     */
    public function remove($id)
    {
        $this->Common_model->checklogin();
        $product = $this->Product_model->get_product($id);

        // check if the product exists before trying to delete it
        if (isset($product['id'])) {
            $this->Product_model->delete_product($id);
            redirect('product/index');
        } else {
            show_error('The product you are trying to delete does not exist.');
        }

    }

    public function getvariations()
    {
        $this->Common_model->checklogin();
        $variations_id   = $this->input->post("variations_id");
        $variations      = $this->Variations_model->get_variations($variations_id);
        $variations_data = '';

        if (!empty($variations)) {
            $name_value = json_decode($variations["name_value"], true);
            $variations_data .= '<div class="col-md-8">
                <label for="variations" class="control-label">&nbsp;</label>
                <div class="form-group">';
            foreach ($name_value as $key => $val) {
                $variations_data .= '<div class="col-md-3"><input type="checkbox" id="name_value_' . $key . '" name="name_value_' . $key . '" />' . $val . "</div>";
            }
            $variations_data .= '</div>
            </div>';
            $response = array(
                "status"          => "success",
                "variations_data" => $variations_data,
            );
        } else {
            $response = array(
                "status"  => "error",
                "message" => "Record not found",
            );
        }
        echo json_encode($response);
    }

    public function get_car_model()
    {
        $this->Common_model->checklogin();
        $model_val   = "";
        $car_make_id = $this->input->post("car_make_id");
        if ($car_make_id == "") {
            $model_val = '';
        } else if ($car_make_id == "all") {
            $model_val = '<option value="all">All</option>';
            $this->load->model('Car_make_model');
            $all_car_model = $this->Carmodel_model->get_all_carmodel();
            foreach ($all_car_model as $car_model) {
                $model_val .= '<option value="' . $car_model['id'] . '">' . $car_model['model_no'] . '</option>';
            }
        } else {
            $qu            = "select * from carmodel where car_make_id = '" . $car_make_id . "'";
            $query         = $this->db->query($qu);
            $all_car_model = $query->result();
            if (!empty($all_car_model)) {
                foreach ($all_car_model as $car_model) {
                    $model_val .= '<option value="' . $car_model->id . '">' . $car_model->model_no . '</option>';
                }
            } else {
                $model_val = '';
            }
        }

        $response = array(
            "status"    => "success",
            "model_val" => $model_val,
        );
        echo json_encode($response);
    }

}
