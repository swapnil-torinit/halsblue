<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Pay extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
        $this->load->model('Customer_model');
        $this->load->model('Order_detail_model');

    }

    /*
     * Listing of ledger
     */
    public function index()
    {
        $this->Common_model->checklogin();

        $data['customers'] = $this->Customer_model->get_all_customers();

        $data['_view'] = 'pay/index';
        $this->load->view('layouts/main', $data);
    }

    public function getDatatables()
    {
        if (!$this->input->is_ajax_request()) {
            show_404();
        }
        echo $this->Common_model->loadDatatablesPay();
    }

    public function clearance()
    {
        $this->Common_model->checklogin();

        $qu          = "select * from receipts where pay_mode='Cheque' order by pay_realisation desc";
        $query       = $this->db->query($qu);
        $data['pay'] = $query->result();

        $data['_view'] = 'pay/clearance';
        $this->load->view('layouts/main', $data);
    }

    /**
     * @param $id
     */
    public function add($id)
    {
        // include('ChromePhp.php';
        // ChromePhp::log('Hello console!');
        // ChromePhp::log($_SERVER);
        // ChromePhp::warn('something went wrong!');
        $this->Common_model->checklogin();

        if (isset($_POST) && !empty($_POST)) {
            $txt_all_selected_values = $this->input->post("txt_all_selected_value");
            $pay_amount              = $this->input->post("paid_amount");
            $pay_remark              = $this->input->post("pay_remark");
            $customer_name           = $this->input->post("customer_name");
            $userid                  = $this->input->post("customer_id");
            $pay_mode                = $this->input->post("pay_mode");
            if ($pay_mode == "Cash" || $pay_mode == "RTGS") {
                $pay_realisation = 1;
            } else {
                $pay_realisation = 0;
            }
            $data = array(
                "userid"          => $userid,
                "customer_name"   => $customer_name,
                "pay_amount"      => $pay_amount,
                "pay_remark"      => $pay_remark,
                "pay_mode"        => $pay_mode,
                "pay_realisation" => $pay_realisation,
                "pay_invoices"    => '',
                "pay_date"        => date("Y-m-d H:i:s"),
            );
            $payid = $this->Common_model->insert_only($data, "receipts");
            //echo $this->db->last_query().'<br>';
            $count_total            = 0;
            $txt_all_selected_value = explode(",", $txt_all_selected_values);
            $invoices               = $this->Common_model->get_sql_rows('select * from invoices where id in (' . $txt_all_selected_values . ') order by id asc');

            foreach ($invoices as $item) {
                if ($pay_amount > 0) {
                    $count_total++;
                    $amount_paid = $item->balance_amount;
                    if ($pay_amount < $item->balance_amount) {
                        $payment_status = 'Partial';
                        $balance_amount = $item->balance_amount - $pay_amount;
                        $amount_paid    = $pay_amount;
                        $pay_amount     = 0;

                        $due_date = $item->invoice_due_date;
                    } else {
                        $payment_status = 'Completed';
                        $pay_amount     = $pay_amount - $item->balance_amount;
                        $balance_amount = 0;
                        $due_date       = '0000-00-00';
                    }
                    $data_invoices = array(
                        "payment_status"   => $payment_status,
                        "balance_amount"   => $balance_amount,
                        "invoice_due_date" => $due_date,
                        "payment_id"       => $payid,
                    );
                    $this->db->where("id", $item->id);
                    $result = $this->db->update("invoices", $data_invoices);
                    // echo $this->db->last_query().'<br>';
                    $invoice_settled[] = array('invoice_id' => $item->invoice_no, 'amount_paid' => $amount_paid, 'status' => $payment_status);
                }
            }
            $data_invoices = array(
                "pay_invoices" => json_encode($invoice_settled),
            );
            $this->db->where("id", $payid);
            $result = $this->db->update("receipts", $data_invoices);

            if ($count_total) {
                $this->session->set_flashdata('message', '<div class="alert alert-success">This payment has settled (' . $count_total . ') no of invoices.</div>');
            } else {
                $this->session->set_flashdata('message', '<div class="alert alert-danger">No Action Performed</div>');
            }
            redirect(base_url() . "pay/index");
        } else {
            $qu             = "select * from invoices where customer_id = '" . $id . "' and payment_status != 'completed'";
            $query          = $this->db->query($qu);
            $data['result'] = $query->result();

            $qu                                = "select distinct(invoice_due_date) from invoices where customer_id = '" . $id . "' and payment_status != 'completed'";
            $query                             = $this->db->query($qu);
            $data['distinct_invoice_due_date'] = $query->result();
            $data['customer']                  = $this->Customer_model->get_customer($id);
            $data['customer_id']               = $id;
            $data['customer_receipts']         = $this->Common_model->get_sql_rows('select * from receipts where userid=' . $id . ' limit 0,5');

            $data['_view'] = 'pay/add';
            $this->load->view('layouts/main', $data);
        }
    }

    public function get_invoice_due_date()
    {
        $invoice_due_date = $this->input->post("invoice_due_date");
        $customer_id      = $this->input->post("customer_id");

        if ($invoice_due_date == "All") {
            $qu = "select * from invoices where customer_id = '" . $customer_id . "' and payment_status != 'completed'";
        } else {
            $qu = "select * from invoices where customer_id = '" . $customer_id . "' and payment_status != 'completed' and invoice_due_date = '" . $invoice_due_date . "'";
        }
        $query  = $this->db->query($qu);
        $result = $query->result();

        $invoice_data = "";
        if (!empty($result)) {
            $i = 1;
            foreach ($result as $invoice) {
                $pdf_original = '';
                if (!empty($invoice->pdf_original)) {
                    $pdf_original = '<a href="' . base_url() . 'download.php?action=upload/invoice_pdf/' . $invoice->pdf_original . '">Click Here</a>';
                }

                $invoice_data .= '<tr>
                      <td><input type="checkbox" name="chk[]" id="select_all_' . $invoice->id . '" class="select_all_' . $i . '" onclick="get_selected_row(' . $invoice->id . ')" value="' . $invoice->id . '"/>
                        </td>
                      <td>' . $i . '</td>
                      <td>' . $invoice->created_on . '</td>
                      <td>For Invoice #' . $invoice->id . '</td>
                      <td>' . $pdf_original . '</td>
                      <td>' . $invoice->invoice_due_date . '</td>
                      <td>' . $invoice->payment_mode . '</td>
                      <td>' . $invoice->payment_status . '</td>
                      <td>' . $invoice->tax_amount . '</td>
                      <td><input type="hidden" name="txt_total_cost_' . $invoice->id . '" id="txt_total_cost_' . $invoice->id . '" value="' . $invoice->total_cost . '" />' . $invoice->total_cost . '</td>
                      <td></td>
                  </tr>';
                $i++;
            }

            $response = array(
                "status"       => "success",
                "invoice_data" => $invoice_data,
            );
        } else {
            $response = array(
                "status"  => "error",
                "message" => "Record not exists.",
            );
        }
        echo json_encode($response);
    }

    public function settlement()
    {
        $this->Common_model->checklogin();

        $qu             = "select * from invoices where payment_status != 'completed'";
        $query          = $this->db->query($qu);
        $data['result'] = $query->result();

        $data['_view'] = 'pay/settlement';
        $this->load->view('layouts/main', $data);
    }

    /**
     * @param $id
     */
    public function pay_realisation($id)
    {
        $this->Common_model->checklogin();

        $qu    = "select id from receipts where id = '" . $id . "'";
        $query = $this->db->query($qu);
        $pay   = $query->row();

        if (isset($pay->id)) {
            $data = array(
                "pay_realisation" => 1,
            );
            $this->db->where("id", $id);
            $result = $this->db->update("receipts", $data);

            redirect('pay/clearance');
        } else {
            show_error('The Payment you are trying to realize does not exist.');
        }

    }
}
